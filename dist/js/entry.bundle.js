/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/entry.js":
/*!**********************!*\
  !*** ./src/entry.js ***!
  \**********************/
/***/ (function() {

eval("// import Journal from \"./model/Journal\";\n// import Store from \"./data/Store\";\n// let allJournals;\n// Store.allJournals = allJournals;\n// const navbar = document.querySelector(\".navbar\");\n// const hamburgerBtn = document.querySelector(\".hamburger-menu\");\n// const createModal = document.getElementById(\"new-modal\");\n// const createModalCloseBtn = document.getElementById(\"new-close\");\n// const newItemSaveBtn = document.getElementById(\"new-save\");\n// createModalCloseBtn.addEventListener(\"click\", () => {\n//   createModal.style.display = \"none\";\n// });\n// newItemSaveBtn.addEventListener(\"click\", () => {\n//   fetchFlagFromCountry();\n// });\n// hamburgerBtn.addEventListener(\"click\", () => {\n//   navbar.classList.toggle(\"open\");\n// });\n// const journalWrapper = document.querySelector(\".journals-wrapper\");\n// journalWrapper.addEventListener(\"click\", (e) => {\n//   console.log(\"clicked\", e.target.id, e.target.tagName);\n//   //要素がbuttonか確認\n//   if (e.target.tagName === \"BUTTON\") {\n//     const btnEle = e.target.id.split(\"-\")[0];\n//     if (btnEle === \"edit\") {\n//       const editId = Number(e.target.id.split(\"-\")[1]);\n//       // country classのid確認してmodalを開く\n//       const modal = document.getElementById(`edit-modal-${editId}`);\n//       modal.style.display = \"block\";\n//     } else if (btnEle === \"delete\") {\n//       alert(\"Do you want to delete item?\");\n//       const deleteId = Number(e.target.id.split(\"-\")[1]);\n//       const deleteJournal = Store.getJournalById(deleteId);\n//       Store.deleteJournal(deleteJournal);\n//       journalUI.displayAllJournals();\n//       journalUI.displayEmojis();\n//     } else {\n//       // idをGet, Storeからそのidと一致するjournalを持ってくる\n//       const targetId = e.target.parentElement.parentElement.id.split(\"-\")[2];\n//       const country = e.target.parentElement.dataset.country;\n//       // 新しい情報をゲットしてオブジェクトを作る\n//       let title = document.getElementById(`title-${targetId}`).value;\n//       let date = document.getElementById(`date-${targetId}`).value;\n//       let text = document.getElementById(`text-${targetId}`).value;\n//       const editedJournal = Store.getJournalById(targetId);\n//       editedJournal.title = title;\n//       editedJournal.date = date;\n//       editedJournal.text = text;\n//       // update journal function\n//       Store.updateJournal(editedJournal);\n//       const modal = document.getElementById(`edit-modal-${targetId}`);\n//       modal.style.display = \"none\";\n//       journalUI.displayAllJournals();\n//     }\n//   }\n//   // modalのcloseクラスの場合はその親のmodalのidを確認してクローズ\n//   if (e.target.tagName === \"SPAN\") {\n//     if (e.target.id === \"new-close\") {\n//       createModal.style.display = \"none\";\n//     } else {\n//       const closeId = Number(e.target.id.split(\"-\")[2]);\n//       const modal = document.getElementById(`edit-modal-${closeId}`);\n//       modal.style.display = \"none\";\n//     }\n//   }\n// });\n// const newJournalBtn = document.getElementById(\"create\");\n// newJournalBtn.addEventListener(\"click\", () => {\n//   createModal.style.display = \"block\";\n//   newCountry.value = \"\";\n//   newTitle.value = \"\";\n//   newDate.value = \"\";\n//   newBody.value = \"\";\n// });\n// // create new journal obj\n// const newCountry = document.getElementById(\"new-country\");\n// const newTitle = document.getElementById(\"new-title\");\n// const newDate = document.getElementById(\"new-date\");\n// const newBody = document.getElementById(\"new-body\");\n// const newSaveBtn = document.getElementById(\"new-save\");\n// // add new Journal to local\n// function fetchFlagFromCountry() {\n//   const country = newCountry.value;\n//   const ENDPOINT = `https://restcountries.com/v3.1/name/${country}`;\n//   fetchFlag(ENDPOINT);\n// }\n// async function fetchFlag(url) {\n//   const res = await fetch(url);\n//   console.log(\"response status: \", res.status);\n//   if (!res.ok) {\n//     const message = `An error has occured: ${res.status}`;\n//     console.log(message);\n//     const emoji = \"\";\n//     createJournal(\n//       newCountry.value,\n//       emoji,\n//       newDate.value,\n//       newTitle.value,\n//       newBody.value\n//     );\n//   } else {\n//     const data = await res.json();\n//     const emoji = data[0].flag;\n//     createJournal(\n//       newCountry.value,\n//       emoji,\n//       newDate.value,\n//       newTitle.value,\n//       newBody.value\n//     );\n//   }\n// }\n// function createJournal(country, emoji, date, title, body) {\n//   const id = Store.getNewId();\n//   const journal = new Journal(id, country, emoji, date, title, body);\n//   // Add to storage\n//   Store.addJournal(journal);\n//   alert(\"New item has been added.\");\n//   createModal.style.display = \"none\";\n//   journalUI.displayAllJournals();\n//   journalUI.displayEmojis();\n// }\n// const emojisWrapper = document.querySelector(\".countries-emojis\");\n// // Get initial countries only the first time\n// window.addEventListener(\"load\", () => {\n//   journalUI.displayEmojis();\n//   journalUI.displayAllJournals();\n// });\n// class journalUI {\n//   static displayEmojis() {\n//     emojisWrapper.innerHTML = \"\";\n//     const emojis = getAllEmojis();\n//     emojis.forEach((emoji) => {\n//       const emojiItem = document.createElement(\"SPAN\");\n//       emojiItem.classList.add(\"country-emoji\");\n//       emojiItem.innerHTML = emoji;\n//       emojisWrapper.append(emojiItem);\n//     });\n//   }\n//   static displayAllJournals() {\n//     journalWrapper.innerHTML = ``;\n//     // get info\n//     allJournals = Store.getAllJournals();\n//     const countries = getAllCountryNames();\n//     countries.forEach((country) => {\n//       const journals = journalsPerCounry(country);\n//       journalUI.addJournalsToContainer(country, journals);\n//     });\n//   }\n//   static addJournalsToContainer(country, journals) {\n//     const journalContainer = document.createElement(\"div\");\n//     journalContainer.classList.add(\"journal-container\");\n//     journalContainer.innerHTML = `\n//       <div class=\"journal-country\" id=\"${country}-container\">\n//             <h1 class=\"journal-country-name\">${country}</h1>\n//           </div>\n//     `;\n//     journalWrapper.appendChild(journalContainer);\n//     journals.forEach((journal) => {\n//       journalUI.addJournalToContainer(country, journal);\n//       journalUI.addModalToCountainer(country, journal);\n//     });\n//   }\n//   static addJournalToContainer(country, journal) {\n//     const journalEle = document.createElement(\"div\");\n//     journalEle.classList.add(\"journal\");\n//     journalEle.innerHTML = `\n//      <div class=\"journal-text\">\n//               <div class=\"journal-date\">${journal.date}</div>\n//               <h5 class=\"journal-title\">${journal.title}</h5>\n//               <div class=\"journal-para\">\n//                 ${journal.text}\n//               </div>\n//               <div class=\"btn-wrapper\">\n//                 <button id=\"edit-${journal.id}\" class=\"btn secondary-btn\">Edit</button>\n//                 <button id=\"delete-${journal.id}\" class=\"btn tertiary-btn\">Delete</button>\n//               </div>\n//             </div>\n//     `;\n//     const container = document.getElementById(`${country}-container`);\n//     container.appendChild(journalEle);\n//   }\n//   // add modal\n//   static addModalToCountainer(country, journal) {\n//     const modalEle = document.createElement(\"div\");\n//     modalEle.classList.add(\"modal\");\n//     modalEle.id = `edit-modal-${journal.id}`;\n//     modalEle.innerHTML = `\n//        <div class=\"edit-modal-content\" data-country=\"${country}\" >\n//             <span id=\"edit-close-${journal.id}\" class=\"modal-close\">&times;</span>\n//             <form>\n//               <div class=\"form-group\">\n//                 <label for=\"title\">Title</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"title\"\n//                   id=\"title-${journal.id}\"\n//                   class=\"form-control\"\n//                   placeholder=\"Enter title\"\n//                 />\n//               </div>\n//               <div class=\"form-group\">\n//                 <label for=\"date\">Date</label>\n//                 <input type=\"date\" name=\"date\" id=\"date-${journal.id}\" placeholder=\"Enter date\" />\n//               </div>\n//               <div class=\"form-group\">\n//                 <label for=\"body\">Body</label>\n//                 <textarea id=\"text-${journal.id}\" class=\"textarea\" placeholder=\"Enter text\"></textarea>\n//               </div>\n//             </form>\n//             <button class=\"btn primary-btn save\">Save Changes</button>\n//           </div>\n//      `;\n//     journalWrapper.appendChild(modalEle);\n//     const title = document.getElementById(`title-${journal.id}`);\n//     const date = document.getElementById(`date-${journal.id}`);\n//     const text = document.getElementById(`text-${journal.id}`);\n//     title.value = journal.title;\n//     date.value = journal.date;\n//     text.value = journal.text;\n//   }\n// }\n// // Countryのみのarrayを返す\n// function getAllCountryNames() {\n//   allJournals = Store.getAllJournals();\n//   let countries = [];\n//   allJournals.forEach((journal) => {\n//     // if it's not already pushed\n//     const lowerJournal = journal.country.toLowerCase();\n//     if (!countries.includes(lowerJournal)) {\n//       countries.push(lowerJournal);\n//     }\n//   });\n//   return countries;\n// }\n// // emojiだけを返す\n// function getAllEmojis() {\n//   allJournals = Store.getAllJournals();\n//   let emojis = [];\n//   allJournals.forEach((journal) => {\n//     if (!emojis.includes(journal.emoji)) {\n//       emojis.push(journal.emoji);\n//     }\n//   });\n//   return emojis;\n// }\n// // Countryごとにjournalを返す\n// function journalsPerCounry(country) {\n//   allJournals = Store.getAllJournals();\n//   let journals = [];\n//   allJournals.forEach((journal) => {\n//     const lowerCaseJournal = journal.country.toLowerCase();\n//     if (lowerCaseJournal === country) {\n//       journals.push(journal);\n//     }\n//   });\n//   return journals;\n// }\n// getAllCountryNames();\n// getAllEmojis();\n// journalsPerCounry(\"japan\");\n\n//# sourceURL=webpack://country-journal-app/./src/entry.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/entry.js"]();
/******/ 	
/******/ })()
;